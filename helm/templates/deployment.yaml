{{- $releaseName := .Release.Name -}}
{{- $chartName := include "config-server.name" . -}}
{{- $cloudProviderFlavor := include "config-server.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "config-server.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "config-server.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "config-server.tag" . -}}
{{ $postgresSecretName := ternary .Values.dbConfig.secretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.dbConfig.useExternalSecret }}
{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-deployment" (include "config-server.fullname" .) }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    release: {{ $releaseName }}
    {{- include "config-server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "config-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "config-server.labels" . | nindent 8 }}
      annotations:
        {{ include "mc-labels-and-annotations.annotations" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
      {{- if .Values.podAnnotations }}
      {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
          {{- end }}
          {{- if .Values.command }}
          command: 
          {{- toYaml .Values.command | nindent 12 }}
          {{- if .Values.args }}
          args: 
          {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            {{- if .Values.dbConfig.sslAuth.enabled }}
            - name: cert-conf
              mountPath: /tmp/certs
              readOnly: true
            {{- end }}
            {{- if .Values.ca.enabled }}
            - mountPath: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
              name: root-ca
              subPath: {{ quote .Values.ca.key }}
            {{- end }}
            {{- if .Values.extraVolumeMounts -}}
              {{ toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.ca.enabled }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.ca.path .Values.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "[%s/%s]" .Values.ca.path .Values.ca.key | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}            
          envFrom:
            - configMapRef:
                name: {{ printf "%s-configmap" (include "config-server.fullname" .) }}
            - secretRef:
                name: {{ printf "%s-secret" (include "config-server.fullname" .) }}
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}        
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
        {{- if .Values.sidecars }}
        {{ tpl (toYaml .Values.sidecars) . | nindent 8 }}
        {{- end }}
      volumes:
        - name: nginx-config
          configMap:
            name: 'nginx-extra-configmap'
      {{- if .Values.dbConfig.sslAuth.enabled }}
        - name: cert-conf
          secret:
            secretName: {{ .Values.dbConfig.secretName }}
      {{- end }}
        {{- if .Values.ca.enabled }}
        - name: root-ca
          secret:
            secretName: {{ .Values.ca.secretName }}
        {{- end }}
        {{- if .Values.extraVolumes -}}
          {{ tpl (toYaml .Values.extraVolumes) . | nindent 8 }}
        {{- end }}    
{{- end -}}
