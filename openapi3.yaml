openapi: 3.0.1
servers:
  - url: /api
  - url: /
info:
  title: config-server
  description: >-
    This is a config server that provides the means to manage all the
    configurations
  version: 1.4.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /config:
    get:
      parameters:
        - $ref: '#/components/parameters/FullTextQuery'
        - $ref: '#/components/parameters/ConfigNameQuery'
        - $ref: '#/components/parameters/SchemaIdQuery'
        - $ref: '#/components/parameters/VersionQuery'
        - $ref: '#/components/parameters/CreatedAtGreaterThanQuery'
        - $ref: '#/components/parameters/CreatedAtLessThanQuery'
        - $ref: '#/components/parameters/CreatedByQuery'
        - $ref: '#/components/parameters/OffsetQuery'
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/SortQuery'
      operationId: getConfigs
      summary: get configs based on filters
      responses:
        '200':
          description: Array containing all the configs returned based on the filters
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  configs:
                    type: array
                    items:
                      $ref: '#/components/schemas/config'
                  total:
                    type: integer
        '400':
          $ref: '#/components/responses/400BadRequest'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      operationId: upsertConfig
      summary: Create a new config or a new version of an existing config
      requestBody:
        required: true
        description: >-
          If no version is provided and no version with the same name exists, a
          new config will be created. If a version is provided, a new version of
          an existing config will be created. The version provided should match
          the latest version of the existing config.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/400BadRequest'
        '409':
          $ref: '#/components/responses/409Conflict'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /config/{name}:
    get:
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/configName'
        - $ref: '#/components/parameters/ShouldDereferenceConfigQuery'
      operationId: getConfigsByName
      summary: get a specific client connection for specific environment
      responses:
        '200':
          description: Array containing all the configs with the specific name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /config/{name}/{version}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/configName'
      - in: path
        name: version
        required: true
        schema:
          oneOf:
            - type: string
              enum:
                - latest
            - $ref: '#/components/schemas/version'
      - $ref: '#/components/parameters/ShouldDereferenceConfigQuery'
    get:
      operationId: getVersionedConfig
      summary: get a specific version of a config
      responses:
        '200':
          description: >-
            Object containing the config with the specific name and version or
            the latest version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /schema:
    get:
      parameters:
        - name: id
          in: query
          description: The id of the requested schema
          required: true
          schema:
            $ref: '#/components/schemas/schemaId'
        - name: shouldDereference
          in: query
          description: should the server bundle all refs into one schema
          schema:
            type: boolean
      operationId: getSchema
      summary: returns the requested schema
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /schema/tree:
    get:
      operationId: getSchemasTree
      summary: return a tree representation of all the schemas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemaTree'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
  /capabilities:
    get:
      operationId: getCapabilities
      summary: get all capabilities about the server
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capabilities'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '500':
          $ref: '#/components/responses/500InternalServerError'
security: []
components:
  responses:
    400BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    404NotFound:
      description: Not Found - If client does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    409Conflict:
      description: conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    422UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    500InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  parameters:
    ConfigNameQuery:
      name: config_name
      in: query
      description: Filters objects based on the exact value of the configName property.
      required: false
      schema:
        $ref: '#/components/schemas/configName'
    SchemaIdQuery:
      name: schema_id
      in: query
      description: >-
        Filters objects where the schemaId property exactly matches the
        specified URL.
      required: false
      schema:
        $ref: '#/components/schemas/schemaId'
    VersionQuery:
      name: version
      in: query
      description: >-
        Filters objects where the version property exactly matches the specified
        version string.
      required: false
      schema:
        oneOf:
          - $ref: '#/components/schemas/version'
          - type: string
            enum:
              - latest
    CreatedAtGreaterThanQuery:
      name: created_at_gt
      in: query
      description: >-
        Filters objects where the createdAt property is greater than the
        specified date-time value (format: ISO 8601).
      required: false
      schema:
        $ref: '#/components/schemas/createdAt'
    CreatedAtLessThanQuery:
      name: created_at_lt
      in: query
      description: >-
        Filters objects where the createdAt property is less than the specified
        date-time value (format: ISO 8601).
      required: false
      schema:
        $ref: '#/components/schemas/createdAt'
    CreatedByQuery:
      name: created_by
      in: query
      description: Filters objects based on the exact value of the createdBy property.
      required: false
      schema:
        $ref: '#/components/schemas/createdBy'
    OffsetQuery:
      name: offset
      in: query
      description: Specifies the number of items to skip before starting to return results.
      required: false
      schema:
        type: integer
        minimum: 0
    LimitQuery:
      name: limit
      in: query
      description: Specifies the maximum number of items to return.
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    FullTextQuery:
      name: q
      in: query
      description: >-
        Search term for full-text search across relevant properties
        (implementation specific).
      required: false
      schema:
        type: string
    SortQuery:
      name: sort
      in: query
      description: |-
        Sorts the results based on the value of one or more properties.
         The value is a comma-separated list of property names and sort order.
         properties should be separated by a colon and sort order should be either asc or desc. For example: configName:asc,schemaId:desc
         The default sort order is ascending. If the sort order is not specified, the default sort order is used. Each property is only allowed to appear once in the list.
      example:
        - config-name:asc
        - schema-id:desc
        - version
      required: false
      schema:
        type: array
        uniqueItems: true
        items:
          example: config-name:asc
          type: string
          pattern: >-
            ^(config-name|schema-id|version|created-at|created-by)(:asc|:desc){0,1}$
    ShouldDereferenceConfigQuery:
      name: shouldDereference
      in: query
      description: should the server bundle all refs into one config
      schema:
        type: boolean
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    configName:
      type: string
      pattern: ^([a-z0-9]+(-[a-z0-9]+)*)$
      maxLength: 50
    schemaId:
      type: string
      pattern: ^https:\/\/mapcolonies\.com\/.+$
      example: https://mapcolonies.com/common/db/v1
    version:
      type: integer
      minimum: 1
    createdAt:
      type: string
      format: date-time
    createdBy:
      type: string
      maxLength: 50
    schemaTree:
      type: array
      example:
        - name: common
          children:
            - name: boilerplate
              children:
                - name: v1
                  id: https://mapcolonies.com/common/boilerplate/v1
                - name: v2
                  id: https://mapcolonies.com/common/boilerplate/v2
                - name: v3
                  id: https://mapcolonies.com/common/boilerplate/v3
            - name: db
              children:
                - name: v1
                  id: https://mapcolonies.com/common/db/v1
      items:
        oneOf:
          - $ref: '#/components/schemas/schemaTreeItem'
          - $ref: '#/components/schemas/schemaTreeDir'
    schemaTreeItem:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          $ref: '#/components/schemas/schemaId'
    schemaTreeDir:
      type: object
      required:
        - children
        - name
      properties:
        children:
          $ref: '#/components/schemas/schemaTree'
        name:
          type: string
    config:
      type: object
      additionalProperties: false
      required:
        - configName
        - schemaId
        - version
        - config
        - createdAt
        - createdBy
      properties:
        configName:
          $ref: '#/components/schemas/configName'
        schemaId:
          $ref: '#/components/schemas/schemaId'
        version:
          $ref: '#/components/schemas/version'
        config:
          additionalProperties: true
          example:
            host: localhost
            port: 8080
        createdAt:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/createdAt'
        createdBy:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/createdBy'
        isLatest:
          type: boolean
          readOnly: true
    capabilities:
      type: object
      required:
        - serverVersion
        - schemasPackageVersion
        - pubSubEnabled
      properties:
        serverVersion:
          description: The version of the server
          type: string
        schemasPackageVersion:
          description: The version of the schemas package
          type: string
        pubSubEnabled:
          description: >-
            a flag that indicates if the pubsub is enabled for config change
            notifications
          type: boolean
